// Code generated by go-bindata.
// sources:
// bangs.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bangsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x95\x51\x6b\xdb\x3e\x14\xc5\xdf\xf3\x29\x84\xe1\x9f\xa7\x7f\xec\xb2\xed\x29\x60\x4c\xcb\x46\xb7\x87\xb1\xd2\x96\x95\x3e\x05\xd9\x56\xe4\x4b\x2c\x4b\xbd\x92\xe2\x79\x59\xbe\xfb\xb0\x94\x16\x8a\x2d\x65\x7b\x58\x5f\x42\xb0\x8e\xef\xef\xde\xa3\x63\xe9\xb0\x20\x24\xf9\x50\x35\xc9\x9a\x8c\x7f\x09\x49\x6a\xa6\x2b\x04\x65\x40\x76\xc9\xda\xad\xd1\x8e\x5c\x49\x8a\xb5\x4e\xfe\xf7\x92\xad\x44\x41\xcd\xb8\xda\x18\xa3\xf4\x3a\xcb\x4a\xb7\x9e\x3a\x71\x2a\x91\x67\x87\xc3\x41\x1f\x8f\xc7\x64\x41\xc8\x71\x7c\x2b\xa1\x41\xc2\xa5\xa0\x3f\x65\x97\x56\x52\x84\xeb\xf7\x7d\x9f\xd2\x17\x5d\xa6\xb3\xc2\x50\x9e\xd7\xb6\xba\xa8\x56\xef\x2e\x96\x16\xdb\x5c\x33\x8a\x55\xb3\xa2\x2d\x50\xfd\xdf\xfb\x8f\x54\xe9\xe5\x16\x58\x5b\xaf\x76\x6c\xe8\x25\xd6\x3a\x9f\xf4\x54\x42\xb0\xa9\x2b\xe8\x38\xf9\x22\x28\x67\x91\xa9\xc7\xae\x4a\xe8\xb8\xeb\x09\x9c\x38\xf3\x6d\x14\x4f\x73\xb4\x8e\x7b\xd1\x5b\x52\x79\x10\x76\x2d\x25\x6f\x59\x9c\xc3\x9d\xc6\x7b\x1e\x46\x84\xd3\x73\x0d\xe6\xb3\x2d\xc3\x0c\x0e\xa6\xb1\xe5\xb9\xfa\xe1\x6d\xf2\x33\xfc\x91\x65\xd3\x51\x4c\x29\x72\xd0\x55\xb3\x9c\x63\x7a\x73\xfe\xbd\x77\x78\x76\xb8\x5b\xb6\x67\xa8\x4f\x43\x92\x3b\x57\x6a\x9e\x1c\x02\x97\x83\x8b\x49\xe1\x7e\x37\xe3\xc7\x32\xe9\x03\x44\x5d\x06\x1b\x71\x8b\x31\xe2\x28\x70\xbc\x2d\x74\x75\xa1\x73\xda\xb6\x73\xa6\x82\xe0\x52\x85\xd3\xef\x07\xfc\xa6\x18\xd2\xf1\x91\x26\x5f\x99\xa1\x2b\x23\x65\x1b\x36\xda\x97\x74\xec\x29\xce\x44\xce\xb5\x71\x31\x05\x19\xa9\xec\x05\x91\xbd\xc3\x60\xf1\x5b\x56\xd7\x60\xe2\xf1\x40\xa7\x39\x13\x0f\x2f\x0a\x5b\xe6\x41\x44\xdb\x12\xff\x0e\x89\x53\xbb\xf0\xfc\x77\xf6\x26\x51\x34\x7b\x83\x52\x45\x4e\xc9\xfb\xef\xe4\xde\x2b\x42\xe8\xe7\x12\xee\x2a\x52\xa2\x87\x1d\x9c\xf8\x1b\x64\xda\xb6\x26\x55\x8d\x9a\xf3\xbb\x0f\x42\x1f\x60\x07\x37\xac\x06\x1a\xb1\x18\x76\xa0\x46\x89\xc3\x3a\xe8\x9d\x62\x15\xd0\x76\xed\xad\x9a\x7a\xde\x87\xaf\xc5\x07\xd9\x6e\x91\x8a\x5f\x97\xad\x6a\x62\xd0\xbe\x4f\x7b\x2f\xa5\xa3\xd2\xdf\x0a\x9d\xb2\x26\x2b\x60\x3a\xe0\x60\x82\xc0\x47\x69\xef\x6d\x79\xe6\x50\x1b\xa4\x35\xb6\xf4\x3b\xea\xad\xd4\xc5\xc9\xd9\x27\xcb\x70\x98\x21\x46\x4e\xb8\x47\xda\xd5\xec\xc7\xeb\x58\x85\xf9\x83\x53\xcf\x5c\x7b\xa8\x4c\xee\x9e\xec\x81\xf5\x4b\x10\x7c\x3e\x58\x0a\x2a\x21\xbb\x1d\x1b\x82\xfd\xdc\x3c\x2b\x4e\x09\xff\x54\x83\x91\x18\x77\xe4\xa5\xea\x29\xe5\xb8\x87\x8a\x15\xcb\x0d\x08\x25\xd1\xbc\xea\x62\x71\x5c\xfc\x0e\x00\x00\xff\xff\xe1\x6e\x2a\x7d\x70\x09\x00\x00")

func bangsJsonBytes() ([]byte, error) {
	return bindataRead(
		_bangsJson,
		"bangs.json",
	)
}

func bangsJson() (*asset, error) {
	bytes, err := bangsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bangs.json", size: 2416, mode: os.FileMode(420), modTime: time.Unix(1564977328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bangs.json": bangsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bangs.json": &bintree{bangsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
