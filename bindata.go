// Code generated by go-bindata.
// sources:
// bangs.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bangsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x31\x4f\xc3\x30\x10\x85\xf7\xfc\x0a\xcb\x12\x4c\x25\x91\x18\x23\x55\x95\x58\x80\x01\x81\xda\x81\x11\xd9\x89\xeb\x1c\x4d\x62\x73\xb6\x49\x11\xea\x7f\x47\xb1\x3b\xb4\xd0\x0b\x30\xc0\x12\x25\xb9\xa7\xf7\xf9\x3d\xdf\x7b\xc6\x18\x97\xc0\x4b\x36\xbe\x31\xc6\x6b\xe5\x2a\x04\xeb\xc1\xf4\xbc\x64\xfc\x0a\x7a\xcd\x6e\x3b\xa1\x95\xe3\xb3\xa4\x58\x1b\xec\x84\x1f\x87\x8d\xf7\xd6\x95\x45\x31\x0c\x43\x2e\xa1\xd7\x79\x65\xba\x02\xa2\xb8\x70\x4a\x60\xd5\x2c\x5e\xe6\x67\x8e\x67\x8c\xed\x66\x09\xd4\xeb\x34\xff\x27\xa0\x26\x39\xd7\xc6\xe8\x56\x4d\x23\x74\xd4\x44\xc8\x69\xf7\x86\xb6\x07\x7f\x13\x24\x6d\xaf\xc1\x37\x41\x4e\x58\xd3\x57\x92\x4e\xfe\xa3\x8e\xbe\x06\xf0\xb2\x9b\x83\xab\x9a\xf3\x4f\xb8\xd4\xc6\x9f\x96\x85\xdf\x46\x5a\xaa\x57\x85\x6e\x1f\x8d\xad\xa2\xcb\x69\x28\xc5\x94\x6f\x71\x1b\x16\xf1\xf9\x14\xb0\x3d\x3a\x02\x74\xda\x58\x7a\xf5\x12\xf6\xde\x2a\x14\xe3\x2f\xc7\xee\x94\x17\x17\xde\x98\x96\x4e\x9e\x2c\xe3\x09\x0e\x49\x48\x42\x96\xaa\xae\xc1\x4f\x57\x89\x51\x43\x57\x99\xe6\x74\x90\xc4\x60\x2e\x48\xfc\x1d\x0d\x8f\x42\x0c\x24\xe0\x11\x36\xf0\xa0\x6a\x10\x13\xce\xb0\x01\x3b\x4a\x72\x83\x3a\x7e\x15\x2b\xab\x2a\x10\x6d\x99\x2e\xf6\x18\x25\x60\x1d\x2e\xb7\x34\x70\x3f\x27\x97\x21\xcd\xf3\x50\xdb\xfc\xd9\x16\xd0\xd7\x6a\x9b\x37\xbe\x6b\x17\x07\x3b\x90\xed\xb2\x8f\x00\x00\x00\xff\xff\xfb\x40\x24\x63\xef\x04\x00\x00")

func bangsJsonBytes() ([]byte, error) {
	return bindataRead(
		_bangsJson,
		"bangs.json",
	)
}

func bangsJson() (*asset, error) {
	bytes, err := bangsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bangs.json", size: 1263, mode: os.FileMode(420), modTime: time.Unix(1545270481, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bangs.json": bangsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bangs.json": &bintree{bangsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
