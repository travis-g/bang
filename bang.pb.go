// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bang.proto

package bang

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EscapeMethod is the type of escaping to be used when escaping non-URL
// safe characters, like spaces and quotes.
type Bang_EscapeMethod int32

const (
	// Escapes the input with url.QueryEscape: "cat pictures" => "cat+pictures"
	QUERY_ESCAPE Bang_EscapeMethod = 0
	// Does no escaping: "cat pictures" => "cat pictures"
	PASS_THROUGH Bang_EscapeMethod = 1
	// Escapes the input with url.PathEscape: "cat pictures" => "cat%20pictures"
	PATH_ESCAPE Bang_EscapeMethod = 2
)

var Bang_EscapeMethod_name = map[int32]string{
	0: "QUERY_ESCAPE",
	1: "PASS_THROUGH",
	2: "PATH_ESCAPE",
}

var Bang_EscapeMethod_value = map[string]int32{
	"QUERY_ESCAPE": 0,
	"PASS_THROUGH": 1,
	"PATH_ESCAPE":  2,
}

func (x Bang_EscapeMethod) String() string {
	return proto.EnumName(Bang_EscapeMethod_name, int32(x))
}

func (Bang_EscapeMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a267da1eca5e2d1b, []int{0, 0}
}

type Bang struct {
	// Name of the Bang, which is used as its ID.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Format of the Bang, where '{{{s}}}' will be substituted with the escaped
	// query string.
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// Description is a summary of the Bang.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// EscapeMethod is the escape method to be used when substiting queries into
	// the Bang's format.
	EscapeMethod         Bang_EscapeMethod `protobuf:"varint,4,opt,name=escape_method,json=escapeMethod,proto3,enum=bang.Bang_EscapeMethod" json:"escape_method,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Bang) Reset()         { *m = Bang{} }
func (m *Bang) String() string { return proto.CompactTextString(m) }
func (*Bang) ProtoMessage()    {}
func (*Bang) Descriptor() ([]byte, []int) {
	return fileDescriptor_a267da1eca5e2d1b, []int{0}
}
func (m *Bang) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bang) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bang.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bang) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bang.Merge(m, src)
}
func (m *Bang) XXX_Size() int {
	return m.Size()
}
func (m *Bang) XXX_DiscardUnknown() {
	xxx_messageInfo_Bang.DiscardUnknown(m)
}

var xxx_messageInfo_Bang proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("bang.Bang_EscapeMethod", Bang_EscapeMethod_name, Bang_EscapeMethod_value)
	proto.RegisterType((*Bang)(nil), "bang.Bang")
}

func init() { proto.RegisterFile("bang.proto", fileDescriptor_a267da1eca5e2d1b) }

var fileDescriptor_a267da1eca5e2d1b = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4a, 0xcc, 0x4b,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0xa5, 0x74, 0xd3, 0x33, 0x4b, 0x32,
	0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xd3, 0xf3, 0xf5, 0xc1, 0x92, 0x49, 0xa5,
	0x69, 0x60, 0x1e, 0x98, 0x03, 0x66, 0x41, 0x34, 0x29, 0x5d, 0x67, 0xe4, 0x62, 0x71, 0x4a, 0xcc,
	0x4b, 0x17, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c,
	0x02, 0xb3, 0x85, 0xc4, 0xb8, 0xd8, 0xd2, 0xf2, 0x8b, 0x72, 0x13, 0x4b, 0x24, 0x98, 0xc0, 0xa2,
	0x50, 0x9e, 0x90, 0x02, 0x17, 0x77, 0x4a, 0x6a, 0x71, 0x72, 0x51, 0x66, 0x41, 0x49, 0x66, 0x7e,
	0x9e, 0x04, 0x33, 0x58, 0x12, 0x59, 0x48, 0xc8, 0x86, 0x8b, 0x37, 0xb5, 0x38, 0x39, 0xb1, 0x20,
	0x35, 0x3e, 0x37, 0xb5, 0x24, 0x23, 0x3f, 0x45, 0x82, 0x45, 0x81, 0x51, 0x83, 0xcf, 0x48, 0x5c,
	0x0f, 0xec, 0x5e, 0x90, 0x85, 0x7a, 0xae, 0x60, 0x79, 0x5f, 0xb0, 0x74, 0x10, 0x4f, 0x2a, 0x12,
	0x4f, 0xc9, 0x99, 0x8b, 0x07, 0x59, 0x56, 0x48, 0x80, 0x8b, 0x27, 0x30, 0xd4, 0x35, 0x28, 0x32,
	0xde, 0x35, 0xd8, 0xd9, 0x31, 0xc0, 0x55, 0x80, 0x01, 0x24, 0x12, 0xe0, 0x18, 0x1c, 0x1c, 0x1f,
	0xe2, 0x11, 0xe4, 0x1f, 0xea, 0xee, 0x21, 0xc0, 0x28, 0xc4, 0xcf, 0xc5, 0x1d, 0xe0, 0x18, 0xe2,
	0x01, 0x53, 0xc2, 0xe4, 0x24, 0x72, 0xe2, 0xa1, 0x1c, 0xc3, 0x85, 0x87, 0x72, 0x0c, 0x27, 0x1e,
	0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0x63, 0x12, 0x1b, 0xd8, 0xdb, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x74, 0xa7, 0x20, 0xf8, 0x39, 0x01, 0x00, 0x00,
}

func (m *Bang) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bang) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bang) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EscapeMethod != 0 {
		i = encodeVarintBang(dAtA, i, uint64(m.EscapeMethod))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBang(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Format) > 0 {
		i -= len(m.Format)
		copy(dAtA[i:], m.Format)
		i = encodeVarintBang(dAtA, i, uint64(len(m.Format)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBang(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBang(dAtA []byte, offset int, v uint64) int {
	offset -= sovBang(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Bang) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBang(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovBang(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBang(uint64(l))
	}
	if m.EscapeMethod != 0 {
		n += 1 + sovBang(uint64(m.EscapeMethod))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBang(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBang(x uint64) (n int) {
	return sovBang(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bang) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bang: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bang: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBang
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBang
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBang
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBang
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBang
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBang
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscapeMethod", wireType)
			}
			m.EscapeMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EscapeMethod |= Bang_EscapeMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBang
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBang(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBang
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBang
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBang
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBang
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBang
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBang
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBang        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBang          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBang = fmt.Errorf("proto: unexpected end of group")
)
